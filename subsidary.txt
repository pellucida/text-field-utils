
The str* subdirectories contain a simple
string implementation in C
	str - basic string functions 
	strprintf - two implementation to support printf formats
                    1. glibc printf customization propagates to system printf etc
                    2. reparse format specification use custom *printf functions
	strvec - basic vector(array) of strings
	strsplit - split string into vector of strings (fields)

The fld* subdirectories contain field specification code for project
	fld - data representation 
	fldvec - basic vector (array) of fld
	fldparse - (recursive descent) parse for field specs
----
'str' string implementation

Strings are usually quite small but with a few larger ones here and there.
The idea is to define a fixed size string (shortstr_t) that will hold +90% of strings but
that can change into a dynamic string that can contain longer stings (longstr_t)
By defining these two string structures to share a common prefix and defining a 
union type (str_t) and a collection of functions to implement the usual string
functions the mechanics of adjusting the data represention can be hidden.

// "str/str_type.h"
struct	short_str {
	strsize_t	length;
	strflag_t	flags;
	char		str [SHORTSTRSIZE+GUARD];
};
typedef	struct	short_str shortstr_t;

struct	long_str {
	strsize_t	length;
	strflag_t	flags;
	strsize_t	size;
	char*		str;
};
typedef	struct	long_str longstr_t;

// Note that the long_str implementation wastes 
//	(SHORSTRSIZE + GUARD) - (sizeof(strsize_t) + sizeof(char*)) bytes
// Here (122 + 1) - (4 + 8) == 111 
// Adjusting SHORTSTRSTORAGE from 128 to 64 ==> SHORTSTRSIZE == 58 and waste == 47
union	str {
	shortstr_t	n;
	longstr_t	x;
};
typedef	struct	str str_t;

static	inline	strsize_t	str_length (str_t* s) {
	return	s->n.length;	// s->x.length equally good
}
